CREATE TABLE IF NOT EXISTS mpa_rating
(
    mpa_id integer generated by default as identity PRIMARY KEY,
    name   varchar(64) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS films
(
    film_id      integer generated by default as identity PRIMARY KEY,
    title        varchar(64) NOT NULL,
    description  varchar(200),
    release_date timestamp,
    duration     integer         NOT NULL,
    mpa_rating   integer,
    CONSTRAINT fk_mpa_rating
        FOREIGN KEY (mpa_rating)
            REFERENCES mpa_rating (mpa_id)
            ON DELETE CASCADE
);

CREATE UNIQUE INDEX IF NOT EXISTS film_id_index ON films (film_id);

CREATE TABLE IF NOT EXISTS genre
(
    genre_id integer generated by default as identity PRIMARY KEY,
    name     varchar(64) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS film_genre
(
    film_id  integer,
    genre_id integer,
    PRIMARY KEY (film_id, genre_id),
    CONSTRAINT fk_film
        FOREIGN KEY (film_id)
            REFERENCES films (film_id)
            ON DELETE CASCADE,
    CONSTRAINT fk_film_genre
        FOREIGN KEY (genre_id)
            REFERENCES genre (genre_id)
            ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS users
(
    user_id  integer generated by default as identity PRIMARY KEY,
    login    varchar(64) NOT NULL UNIQUE,
    email    varchar(64) NOT NULL UNIQUE,
    name     varchar(64) NOT NULL,
    birthday timestamp
);

CREATE UNIQUE INDEX IF NOT EXISTS user_id_index ON users (user_id);

CREATE TABLE IF NOT EXISTS likes
(
    user_id integer,
    film_id integer,
    PRIMARY KEY (user_id, film_id),
    CONSTRAINT fk_like_user
        FOREIGN KEY (user_id)
            REFERENCES users (user_id)
            ON DELETE CASCADE,
    CONSTRAINT fk_like_film
        FOREIGN KEY (film_id)
            REFERENCES films (film_id)
            ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS friends
(
    user_id   integer,
    friend_id integer,
    status    integer,
    PRIMARY KEY (user_id, friend_id),
    CONSTRAINT fk_friend_user
        FOREIGN KEY (user_id)
            REFERENCES users (user_id)
            ON DELETE CASCADE,
    CONSTRAINT fk_friend
        FOREIGN KEY (friend_id)
            REFERENCES users (user_id)
            ON DELETE CASCADE,
    CONSTRAINT status_valid_values CHECK (status IN (0, 1, 2))
);